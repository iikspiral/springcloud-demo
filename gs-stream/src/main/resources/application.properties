spring.application.name=zpp-stream
server.port=8081

management.endpoints.web.exposure.include=*

# 解决消息重复消费问题
spring.cloud.stream.bindings.consumer-group-topic-input.group=consumerGroup

# 当我们使用@Output和@Input注解来定义消息通道时，都会根据传入的通道名称来创建一个Bean
# 为两个通道设置相同的topic（解决springcloud版本不同的问题）
spring.cloud.stream.bindings.consumer-group-topic-input.destination=consumer-group-topic
spring.cloud.stream.bindings.consumer-group-topic-output.destination=consumer-group-topic

# 为输入输出通道指定相同的topic名字 rabbitmq(exchange)
spring.cloud.stream.bindings.consumer-self-topic-input.destination=consumer-self-topic
spring.cloud.stream.bindings.consumer-self-topic-output.destination=consumer-self-topic

spring.cloud.stream.bindings.consumer-self-topic-input.group=stream-exception-handler

# 默认情况下Spring Cloud Stream会重试3次
spring.cloud.stream.bindings.consumer-self-topic-input.consumer.max-attempts=1

# 消息消费失败后重新入队
spring.cloud.stream.rabbit.bindings.consumer-self-topic.requeue-rejected=true

# 开启DLQ（死信队列）
spring.cloud.stream.rabbit.bindings.consumer-self-topic-input.consumer.auto-bind-dlq=true
# DLQ队列消息的存活时间
#spring.cloud.stream.rabbit.bindings.consumer-self-topic-input.consumer.dlq-ttl=10000

# 开启消费者分区功能
#spring.cloud.stream.bindings.input.consumer.partitioned=true


# 延迟消息配置
# 消费端
spring.cloud.stream.bindings.delayed-topic-input.destination=delay-exchange
spring.cloud.stream.bindings.delayed-topic-input.group=test
spring.cloud.stream.rabbit.bindings.delayed-topic-input.consumer.delayed-exchange=true
# 生产端：延时消息配置
spring.cloud.stream.bindings.delayed-topic-output.destination=delay-exchange
# 开启延迟消息的功能
spring.cloud.stream.rabbit.bindings.delayed-topic-output.producer.delayed-exchange=true
